// Preprocessor_directives.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
/*
Задача 1. Препроцессорные директивы
В этом задании вы используете некоторые препроцессорные директивы, которые вы изучили ранее.

В вашей программе выполните действия:

Объявите символьную константу MODE с целочисленным значением.
Проверьте, что константа определена, иначе программа не должна скомпилироваться и должна выдать сообщение о необходимости определить MODE.
В случае, если MODE имеет значение 0, выведите на консоль «Работаю в режиме тренировки».
Если MODE имеет значение 1, определите функцию add, которая должна складывать два числа. Выведите на консоль «Работаю в боевом режиме», попросите пользователя ввести два числа и выведите результат сложения с помощью функции add на консоль.
Если MODE имеет любое другое значение, выведите на консоль «Неизвестный режим. Завершение работы».
Обратите внимание: функция add должна быть определена только, если MODE имеет значение 1.

Пример работы программы
Консоль
Работаю в боевом режиме
Введите число 1: 4
Введите число 2: 6
Результат сложения: 10
*/

#include <iostream>

using std::cout;
using std::cin;
using std::endl;

#define MODE 1
#ifndef MODE
#error Необходимо определить MODE.
#endif

#if (MODE == 0) 
#define MES "Работаю в режиме тренировки"

#elif (MODE == 1)
#define MES "Работаю в боевом режиме"
int add(int num_1, int num_2) {
    return num_1 + num_2;
}

#else 
#define MES "Неизвестный режим. Завершение работы"
#endif
int main()
{
    setlocale(LC_ALL, "Russian");

    cout << MES << endl;

#if (MODE == 1)
    cout << "Введите число 1: " << endl;
    int num_1 = 0;
    cin >> num_1;

    cout << "Введите число 2: " << endl;
    int num_2 = 0;
    cin >> num_2;

    cout << "Результат сложения: " << endl;
    cout << add(num_1, num_2) << endl;
#elif
    exit(0);
#endif

    return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
