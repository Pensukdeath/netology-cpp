// Figures_Methods.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
/*
Задача 3. Фигуры. Методы
В этом задании вы добавите в вашу иерархию классов больше функциональности.

Теперь ваши фигуры должны уметь немного больше:

выводить информацию о себе;
проверять правильность своих данных.
Ваши фигуры:

фигура (количество сторон равно 0);
треугольник (стороны и углы произвольные, количество сторон равно 3, сумма углов равна 180);
прямоугольный треугольник (угол C всегда равен 90);
равнобедренный треугольник (стороны a и c равны, углы A и C равны);
равносторонний треугольник (все стороны равны, все углы равны 60);
четырёхугольник (стороны и углы произвольные, количество сторон равно 4, сумма углов равна 360);
прямоугольник (стороны a,c и b,d попарно равны, все углы равны 90);
квадрат (все стороны равны, все углы равны 90);
параллелограмм (стороны a,c и b,d попарно равны, углы A,C и B,D попарно равны);
ромб (все стороны равны, углы A,C и B,D попарно равны).
Вы должны иметь возможность попросить фигуру вывести информацию о себе на консоль, а также узнать, является ли фигура правильной, то есть выполняются ли условия, указанные в списке выше.

Информация о фигуре включает в себя:

название фигуры;
количество сторон;
длины её сторон, если есть;
величины её углов, если есть;
является ли фигура правильной.
Задача: спроектировать и реализовать классы, описывающие предметную область. Продемонструйте их работу: создайте по одному экземпляру каждой фигуры и выведите на экран информацию о фигурах.

Реализуйте методы вывода на консоль и проверки правильности фигуры с помощью виртуальных функций и переопределений. Используйте вызов базовой версии метода.

Ваша задача — работать с экземплярами дочерних классов полиморфно, то есть с помощью указателя на базовый класс.

Пример работы программы
Консоль
Фигура:
Правильная
Количество сторон: 0

Треугольник:
Правильная
Количество сторон: 3
Стороны: a=10 b=20 c=30
Углы: A=50 B=60 C=70

Прямоугольный треугольник:
Неправильная
Количество сторон: 3
Стороны: a=10 b=20 c=30
Углы: A=50 B=60 C=90

Прямоугольный треугольник:
Правильная
Количество сторон: 3
Стороны: a=10 b=20 c=30
Углы: A=50 B=40 C=90

Равнобедренный треугольник:
Неправильная
Количество сторон: 3
Стороны: a=10 b=20 c=10
Углы: A=50 B=60 C=50

Равносторонний треугольник:
Правильная
Количество сторон: 3
Стороны: a=30 b=30 c=30
Углы: A=60 B=60 C=60

Четырёхугольник:
Неправильная
Количество сторон: 4
Стороны: a=10 b=20 c=30 d=40
Углы: A=50 B=60 C=70 D=80

Прямоугольник:
Правильная
Количество сторон: 4
Стороны: a=10 b=20 c=10 d=20
Углы: A=90 B=90 C=90 D=90

Квадрат:
Правильная
Количество сторон: 4
Стороны: a=20 b=20 c=20 d=20
Углы: A=90 B=90 C=90 D=90

Параллелограмм:
Неправильная
Количество сторон: 4
Стороны: a=20 b=30 c=20 d=30
Углы: A=30 B=40 C=30 D=40

Ромб:
Неправильная
Количество сторон: 4
Стороны: a=30 b=30 c=30 d=30
Углы: A=30 B=40 C=30 D=40
*/

#include <iostream>

using namespace std;

class Figure {
protected:
    int sides_count;

public:
    Figure() {
        sides_count = 0;
    }

    virtual void print_info() {
        cout << "Фигура:" << endl;
        cout << "Правильная" << endl;
        cout << "Количество сторон: " << sides_count << endl;
    }
};

class Triangle : public Figure {
protected:
    double a, b, c;
    double A, B, C;

public:
    Triangle() {
        sides_count = 3;
        a = b = c = 10;
        A = B = C = 60;
    }

    void print_info() override {
        cout << "Треугольник:" << endl;
        if (A + B + C == 180) {
            cout << "Правильная" << endl;
        }
        else {
            cout << "Неправильная" << endl;
        }
        cout << "Количество сторон: " << sides_count << endl;
        cout << "Стороны: a=" << a << " b=" << b << " c=" << c << endl;
        cout << "Углы: A=" << A << " B=" << B << " C=" << C << endl;
    }
};

class RightTriangle : public Triangle {
public:
    RightTriangle() {
        a = 10;
        b = 20;
        c = 30;
        A = 50;
        B = 60;
        C = 90;
    }

    void print_info() override {
        cout << "Прямоугольный треугольник:" << endl;
        if (C == 90) {
            cout << "Правильная" << endl;
        }
        else {
            cout << "Неправильная" << endl;
        }
        cout << "Количество сторон: " << sides_count << endl;
        cout << "Стороны: a=" << a << " b=" << b << " c=" << c << endl;
        cout << "Углы: A=" << A << " B=" << B << " C=" << C << endl;
    }
};

class IsoscelesTriangle : public Triangle {
public:
    IsoscelesTriangle() {
        a = 10;
        b = 20;
        c = 10;
        A = 50;
        B = 50;
        C = 80;
    }

    void print_info() override {
        cout << "Равнобедренный треугольник:" << endl;
        if (a == c && A == C) {
            cout << "Правильная" << endl;
        }
        else {
            cout << "Неправильная" << endl;
        }
        cout << "Количество сторон: " << sides_count << endl;
        cout << "Стороны: a=" << a << " b=" << b << " c=" << c << endl;
        cout << "Углы: A=" << A << " B=" << B << " C=" << C << endl;
    }
};

class EquilateralTriangle : public Triangle {
public:
    EquilateralTriangle() {
        a = b = c = 30;
        A = B = C = 60;
    }

    void print_info() override {
        cout << "Равносторонний треугольник:" << endl;
        if (a == b && b == c && A == B && B == C) {
            cout << "Правильная" << endl;
        }
        else {
            cout << "Неправильная" << endl;
        }
        cout << "Количество сторон: " << sides_count << endl;
        cout << "Стороны: a=" << a << " b=" << b << " c=" << c << endl;
        cout << "Углы: A=" << A << " B=" << B << " C=" << C << endl;
    }
};

class Quadrilateral : public Figure {
protected:
    double a, b, c, d;
    double A, B, C, D;

public:
    Quadrilateral() {
        sides_count = 4;
        a = b = c = d = 10;
        A = B = C = D = 90;
    }

    void print_info() override {
        cout << "Четырёхугольник:" << endl;
        if (A + B + C + D == 360) {
            cout << "Правильная" << endl;
        }
        else {
            cout << "Неправильная" << endl;
        }
        cout << "Количество сторон: " << sides_count << endl;
        cout << "Стороны: a=" << a << " b=" << b << " c=" << c << " d=" << d << endl;
        cout << "Углы: A=" << A << " B=" << B << " C=" << C << " D=" << D << endl;
    }
};

class Rectangle : public Quadrilateral {
public:
    Rectangle() {
        a = c = 10;
        b = d = 20;
        A = B = C = D = 90;
    }

    void print_info() override {
        cout << "Прямоугольник:" << endl;
        if (A == 90 && B == 90 && C == 90 && D == 90 && a == c && b == d) {
            cout << "Правильная" << endl;
        }
        else {
            cout << "Неправильная" << endl;
        }
        cout << "Количество сторон: " << sides_count << endl;
        cout << "Стороны: a=" << a << " b=" << b << " c=" << c << " d=" << d << endl;
        cout << "Углы: A=" << A << " B=" << B << " C=" << C << " D=" << D << endl;
    }
};

class Square : public Rectangle {
public:
    Square() {
        a = b = c = d = 20;
        A = B = C = D = 90;
    }

    void print_info() override {
        cout << "Квадрат:" << endl;
        if (a == b && b == c && c == d && A == B && B == C && C == D && A == 90) {
            cout << "Правильная" << endl;
        }
        else {
            cout << "Неправильная" << endl;
        }
        cout << "Количество сторон: " << sides_count << endl;
        cout << "Стороны: a=" << a << " b=" << b << " c=" << c << " d=" << d << endl;
        cout << "Углы: A=" << A << " B=" << B << " C=" << C << " D=" << D << endl;
    }
};

int main() {
    setlocale(LC_ALL, "Russian");

    Figure figure;
    Triangle triangle;
    RightTriangle rightTriangle;
    IsoscelesTriangle isoscelesTriangle;
    EquilateralTriangle equilateralTriangle;
    Quadrilateral quadrilateral;
    Rectangle rectangle;
    Square square;

    figure.print_info();
    cout << endl;
    triangle.print_info();
    cout << endl;
    rightTriangle.print_info();
    cout << endl;
    isoscelesTriangle.print_info();
    cout << endl;
    equilateralTriangle.print_info();
    cout << endl;
    quadrilateral.print_info();
    cout << endl;
    rectangle.print_info();
    cout << endl;
    square.print_info();

    return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
